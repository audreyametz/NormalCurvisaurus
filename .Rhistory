bins= cut(fmri.pca$x[,1],10, labels=colors)
fmri
12
fmri.latent.sem
fmri.latent.sem[,1]
bins= cut(fmri.latent.sem[,1],10, labels=colors)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="300 most active voxels", color = bins)
bins= cut(fmri.latent.sem[,1],10, labels=colors)
colors= c("red", "blue", "green", "orange", "purple", "pink", "black", "yellow", "cyan", "powderblue")
bins= cut(fmri.latent.sem[,1],10, labels=colors)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="300 most active voxels", color = bins)
colors= c("red", "blue", "green", "orange", "purple", "pink", "black", "cyan", "letter", "powderblue")
bins= cut(fmri.latent.sem[,1],10, labels=colors)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="300 most active voxels", color = bins)
colors= c("red", "blue", "green", "orange", "purple", "pink", "black", "yellow", "cyan", "powderblue")
bins= cut(fmri.latent.sem[,1],10, labels=colors)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="300 most active voxels", color = bins)
colors= c("red", "blue", "green", "orange", "purple", "pink", "black", "cyan", "yellow", "powderblue")
bins= cut(fmri.latent.sem[,1],10, labels=colors)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="300 most active voxels", color = bins)
colors= c("red", "blue", "green", "orange", "purple", "pink", "black", "powderblue", "yellow", "cyan")
bins= cut(fmri.latent.sem[,1],10, labels=colors)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="300 most active voxels", color = bins)
colors= c("red", "blue", "green", "blue", "purple", "pink", "orange", "powderblue", "yellow", "cyan")
bins= cut(fmri.latent.sem[,1],10, labels=colors)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="300 most active voxels", color = bins)
colors= c("red", "blue", "green", "blue", "purple", "pink", "blueviolet", "powderblue", "yellow", "cyan")
bins= cut(fmri.latent.sem[,1],10, labels=colors)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="300 most active voxels", color = bins)
colors= c("red", "blue", "green", "orange", "purple", "pink", "blueviolet", "powderblue", "yellow", "cyan")
bins= cut(fmri.latent.sem[,1],10, labels=colors)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="300 most active voxels", color = bins)
scatterplot3d(x=col2coord,pch=10,
xlab="x", ylab="y", zlab="z", main="Voxels binned by PC1", color = bins)
```{r}
dim(fmri)
fmri[172, 2014]
# Doing the PCA
fmri.pca = prcomp(fmri)
# Doing the PCA
fmri.pca = prcomp(fmri)
# Obtaining the loading vectors for each PCA
fmri.latent.sem = fmri.pca$rotation
# To obtain the variances, we first find the standard deviations for all of the principal components. We square them to obtain the variances because variance = sd^2.
variances = fmri.pca$sdev^2
# To get the fraction of variance for PC1, we divide the variance for PC1 by the sum of variances across all principle components.
variances[1]/sum(variances)
knitr::opts_chunk$set(echo = TRUE)
cols <- sapply(data.pre, is.logical)
data.pre[,cols] <- lapply(data.pre[,cols], as.numeric)
data = read.csv('user_profile.csv')
summary(data)
data.pre = data[-c(1, 2, 3, 4, 5, 27, 28, 36)]
data.pre = subset(data.pre, (data.pre$gender == 'Male' | data.pre$gender == 'Female'))
data.pre= na.omit(data.pre)
data.pre$gender = data.pre$gender == 'Female'
data.pre$is_homeowner = data.pre$is_homeowner == 'True'
cols <- sapply(data.pre, is.logical)
data.pre[,cols] <- lapply(data.pre[,cols], as.numeric)
decode_bucket <- function(fctr) {
fctr <- gsub("[()]", '', fctr)
fctr <- gsub("\\]", '', fctr)
bounds <- strsplit(fctr, ", ")
return(mean(as.numeric(bounds[[1]])))
}
age.bucket = data.pre$age_bucket
age.bucket
unlist(lapply(age.bucket, FUN = decode_bucket))
age.bucket
data.pre$age = unlist(lapply(data.pre$age_bucket, FUN = decode_bucket))
data.pre$credit_score = unlist(lapply(data.pre$credit_score_bucket, FUN = decode_bucket))
na.omit(data.pre)
data.pre
data.pre = data.pre[-c(30,31)]
data.pca = prcomp(data.pre, scale=TRUE)
data.pca$age
data.pre$age
data.pre = na.omit(data.pre)
data.pca = prcomp(data.pre, scale=TRUE)
loadings = data.pca$rotation
plot(data.pca$x[,1:2])
biplot(data.pca, scale=0, cex = 0.5)
loadings
biplot(data.pca, scale=0, cex = 0.5)
biplot(data.pca, scale=0)
data.pre
plot(data.pca$x[,1:2])
loadings[,2] < -100
loadings[,2]
data.pca$x
data.pca$x[,2]
which(data.pca$x[,2] < -100)
data.pca$x[,2] < -100
sum(data.pca$x[,2] < -100)
plot(data.pca$x[,1:2])
data.pca$x[,2]
sum(data.pca$x[,2] < -5)
sum(data.pca$x[,2] < -1000)
sum(data.pca$x[,2] < -100)
sum(data.pca$x[,2] < -50)
sum(data.pca$x[,2] < -10)
sum(data.pca$x[,2] < -15)
sum(data.pca$x[,1] < -100)
which(data.pca$x[,1] < -100)
data.pre[which(data.pca$x[,1] < -100),]
data.pre
summary(data.pre)
data.pre$total_mortgage_loans_amount
summary(data.pre)
data.pre$total_mortgage_loans_balance
summary(data.pre)
summary(data.pre)
barplot(data.pre$total_mortgage_loans_balance)
hist(data.pre$total_mortgage_loans_balance)
sum(data.pre$total_mortgage_loans_balance > 0)
sum(data.pre$total_mortgage_loans_balance > 5000)
sum(data.pre$total_mortgage_loans_balance > 100000)
sum(data.pre$total_mortgage_loans_balance > 1000000)
hist(data.pre$total_mortgage_loans_balance, breaks=5)
hist(data.pre$total_mortgage_loans_balance, breaks=50)
hist(data.pre$total_mortgage_loans_balance, breaks=500)
hist(data.pre$total_mortgage_loans_balance, breaks=c(1000))
hist(data.pre$total_mortgage_loans_balance, breaks=c(1000, seq(1000, 8000000, 500000)))
hist(data.pre$total_mortgage_loans_balance, breaks=c(0, seq(1000, 8000000, 500000)))
hist(data.pre$total_mortgage_loans_balance)
summary(data.pre)
data.pre.cont = data.pre[-c(4, 5, 8, 11, 12, 13, 18, 19, 22, 26, 28)]
data.pca = prcomp(data.pre.cont, scale=TRUE)
loadings = data.pca$rotation
loadings
plot(x = data.pre.cont$age, y = data.pre.cont$credit_score)
loadings
plot(data.pca$x[,1:2])
biplot(data.pca, scale=0)
summary(data.pre)
loadings
biplot(data.pca, scale=0)
biplot(data.pca, scale=0, cex=0.7)
plot(x = data.pre.cont$count_tradelines_condition_derogatory, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$total_tradelines_amount_past_due, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$total_tradelines_amount_past_due, y = data.pre.cont$credit_score)
loadings
loadings
par(mfrow=c(3, 3))
plot(x = data.pre.cont$tradelines_avg_days_since_opened, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_total_tradelines_opened_24_months, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_tradelines_condition_derogatory, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$max_cc_limit, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$total_mortgage_loans_balance, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_inquiries_6_months, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$tradelines_avg_days_since_opened, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_tradelines_closed_accounts, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_total_tradelines_opened_24_months, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_tradelines_condition_derogatory, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_open_installment_accounts_24_months, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_tradelines_opened_accounts, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_tradelines_open_secured_loans, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_tradelines_open_unsecured_loans, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$total_tradelines_amount_past_due, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$total_tradelines_open_balance, y = data.pre.cont$credit_score) #yes
plot(x = data.pre.cont$max_cc_limit, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$total_tradelines_open_balance, y = data.pre.cont$credit_score, xlim = c(0, 100000)) #yes
plot(x = data.pre.cont$total_tradelines_open_balance, y = data.pre.cont$credit_score, xlim = c(0, 500000)) #yes
plot(x = data.pre.cont$total_tradelines_open_balance, y = data.pre.cont$credit_score, xlim = c(0, 1000000)) #yes
plot(x = data.pre.cont$total_tradelines_amount_past_due, y = data.pre.cont$credit_score) #yes
plot(x = data.pre.cont$max_cc_limit, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$max_cc_limit, y = data.pre.cont$credit_score, xlim = c(0, 150000))
plot(x = data.pre.cont$total_mortgage_loans_balance, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$total_mortgage_loans_balance, y = data.pre.cont$credit_score, xlim = c(0, 4000000))
plot(x = data.pre.cont$total_auto_loans_balance, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$total_student_loans_balance, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$count_bankruptcy, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$age, y = data.pre.cont$credit_score)
plot(x = data.pre.cont$tradelines_avg_days_since_opened, y = data.pre.cont$credit_score) #no
plot(x = data.pre.cont$count_tradelines_opened_accounts, y = data.pre.cont$credit_score) #no
plot(x = data.pre.cont$total_mortgage_loans_balance, y = data.pre.cont$credit_score, xlim = c(0, 4000000))
plot(x = data.pre.cont$count_tradelines_closed_accounts, y = data.pre.cont$credit_score) #maybe
plot(x = data.pre.cont$count_total_tradelines_opened_24_months, y = data.pre.cont$credit_score) #maybe
plot(x = data.pre.cont$count_open_installment_accounts_24_months, y = data.pre.cont$credit_score) #maybe
plot(x = data.pre.cont$max_cc_limit, y = data.pre.cont$credit_score, xlim = c(0, 150000)) #maybe
plot(x = data.pre.cont$count_tradelines_closed_accounts, y = data.pre.cont$credit_score) #maybe
plot(x = data.pre.cont$count_total_tradelines_opened_24_months, y = data.pre.cont$credit_score) #maybe
plot(x = data.pre.cont$count_open_installment_accounts_24_months, y = data.pre.cont$credit_score) #maybe
plot(x = data.pre.cont$count_tradelines_open_secured_loans, y = data.pre.cont$credit_score) #maybe
screeplot(data.pca, type = "lines")
user_engage_data = read.csv('user_engagement.csv')
summary(user_engage_data)
user_engage_actions = user_engage_data[c(21, 22, 23, 24, 25, 26)]
user_engage_actions
kmeanclusters = kmeans(user_engage_actions, 4, nstart=20)
kmeanclusters.out
kmeanclusters
kmeanclusters = kmeans(user_engage_actions, 3, nstart=20)
kmeanclusters
kmeanclusters = kmeans(user_engage_actions, 4, nstart=20)
kmeanclusters
kmeanclusters = kmeans(user_engage_actions, 3, nstart=20)
kmeanclusters
kmeanclusters = kmeans(user_engage_actions, 5, nstart=20)
kmeanclusters
kmeanclusters = kmeans(user_engage_actions, 10, nstart=20)
kmeanclusters
k.max <- 20
data <- user_engage_actions
wss <- sapply(1:k.max,
function(k){kmeans(data, k, nstart=50,iter.max = 15 )$tot.withinss})
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
kmeanclusters = kmeans(user_engage_actions, 5, nstart=20)
kmeanclusters
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
kmeanclusters = kmeans(user_engage_actions, 8, nstart=20)
kmeanclusters
kmeanclusters = kmeans(user_engage_actions, 8, nstart=20)
kmeanclusters
kmeanclusters$cluster
kmeanclusters = kmeans(user_engage_actions, 5, nstart=20)
kmeanclusters$cluster
kmeanclusters
kmeanclusters = kmeans(user_engage_actions, 8, nstart=20)
kmeanclusters
click_credit_card = user_engage_data[which(kmeanclusters$cluster == 6)]
click_credit_card = user_engage_data[which(kmeanclusters$cluster == 6),]
click_credit_card
click_credit_card$click_count_credit_card
kmeanclusters
click_personal_loan = user_engage_data[which(kmeanclusters$cluster == 7),]
click_personal_loan$click_count_personal_loan
click_credit_card$user_id
count(click_credit_card$user_id
)
count(click_credit_card$user_id)
nrow(click_credit_card$user_id)
nrow(click_credit_card)
nrow(click_credit_card$user_id)
nrow(unique(click_credit_card$user_id))
click_credit_card$user_id
click_credit_card$user_id[1,]
click_credit_card$user_id
unique(click_credit_card$user_id)
unique(click_credit_card$user_id)
nrow(unique(click_credit_card$user_id))
length(unique(click_credit_card$user_id))
length(unique(click_personal_loan$user_id))
nrow(click_personal_loan
)
click_credit_card = user_engage_data[which(kmeanclusters$cluster == 6),]
click_personal_loan = user_engage_data[which(kmeanclusters$cluster == 7),]
merged_demo_engagement = merge(user_data, user_engage_data, by = 'user_id')
user_data = read.csv('user_profile.csv')
summary(data)
summary(user_data)
data.pre = user_data[-c(1, 2, 3, 4, 5, 27, 28, 36)]
#ishomeowner, gender(remove unisex), remove NA from 8, 9, 10, 27, 28
data.pre = subset(data.pre, (data.pre$gender == 'Male' | data.pre$gender == 'Female'))
data.pre= na.omit(data.pre)
data.pre$gender = data.pre$gender == 'Female'
data.pre$is_homeowner = data.pre$is_homeowner == 'True'
cols <- sapply(data.pre, is.logical)
data.pre[,cols] <- lapply(data.pre[,cols], as.numeric)
decode_bucket <- function(fctr) {
fctr <- gsub("[()]", '', fctr)
fctr <- gsub("\\]", '', fctr)
bounds <- strsplit(fctr, ", ")
return(mean(as.numeric(bounds[[1]])))
}
data.pre$age = unlist(lapply(data.pre$age_bucket, FUN = decode_bucket))
data.pre$age = unlist(lapply(data.pre$age_bucket, FUN = decode_bucket))
data.pre$credit_score = unlist(lapply(data.pre$credit_score_bucket, FUN = decode_bucket))
data.pre = na.omit(data.pre)
data.pre = data.pre[-c(30,31)]
hist(data.pre$total_mortgage_loans_balance)
summary(data.pre)
summary(user_data)
data.pre = user_data[-c(2, 3, 4, 5, 27, 28, 36)]
#ishomeowner, gender(remove unisex), remove NA from 8, 9, 10, 27, 28
data.pre = subset(data.pre, (data.pre$gender == 'Male' | data.pre$gender == 'Female'))
data.pre= na.omit(data.pre)
data.pre$gender = data.pre$gender == 'Female'
data.pre$is_homeowner = data.pre$is_homeowner == 'True'
cols <- sapply(data.pre, is.logical)
data.pre[,cols] <- lapply(data.pre[,cols], as.numeric)
decode_bucket <- function(fctr) {
fctr <- gsub("[()]", '', fctr)
fctr <- gsub("\\]", '', fctr)
bounds <- strsplit(fctr, ", ")
return(mean(as.numeric(bounds[[1]])))
}
data.pre$age = unlist(lapply(data.pre$age_bucket, FUN = decode_bucket))
data.pre$credit_score = unlist(lapply(data.pre$credit_score_bucket, FUN = decode_bucket))
data.pre = na.omit(data.pre)
data.pre = data.pre[-c(30,31)]
summary(data.pre)
data.pre = user_data[-c(2, 3, 4, 5, 27, 28, 36)]
#ishomeowner, gender(remove unisex), remove NA from 8, 9, 10, 27, 28
data.pre = subset(data.pre, (data.pre$gender == 'Male' | data.pre$gender == 'Female'))
data.pre= na.omit(data.pre)
data.pre$gender = data.pre$gender == 'Female'
data.pre$is_homeowner = data.pre$is_homeowner == 'True'
cols <- sapply(data.pre, is.logical)
data.pre[,cols] <- lapply(data.pre[,cols], as.numeric)
decode_bucket <- function(fctr) {
fctr <- gsub("[()]", '', fctr)
fctr <- gsub("\\]", '', fctr)
bounds <- strsplit(fctr, ", ")
return(mean(as.numeric(bounds[[1]])))
}
data.pre$age = unlist(lapply(data.pre$age_bucket, FUN = decode_bucket))
data.pre$credit_score = unlist(lapply(data.pre$credit_score_bucket, FUN = decode_bucket))
data.pre = na.omit(data.pre)
data.pre = data.pre[-c(31,32)]
summary(data.pre)
summary(user_data)
data.pre = user_data[-c(1, 3, 4, 5, 27, 28, 36)]
#ishomeowner, gender(remove unisex), remove NA from 8, 9, 10, 27, 28
data.pre = subset(data.pre, (data.pre$gender == 'Male' | data.pre$gender == 'Female'))
data.pre= na.omit(data.pre)
data.pre$gender = data.pre$gender == 'Female'
data.pre$is_homeowner = data.pre$is_homeowner == 'True'
cols <- sapply(data.pre, is.logical)
data.pre[,cols] <- lapply(data.pre[,cols], as.numeric)
decode_bucket <- function(fctr) {
fctr <- gsub("[()]", '', fctr)
fctr <- gsub("\\]", '', fctr)
bounds <- strsplit(fctr, ", ")
return(mean(as.numeric(bounds[[1]])))
}
data.pre$age = unlist(lapply(data.pre$age_bucket, FUN = decode_bucket))
data.pre$age = unlist(lapply(data.pre$age_bucket, FUN = decode_bucket))
data.pre$credit_score = unlist(lapply(data.pre$credit_score_bucket, FUN = decode_bucket))
data.pre = na.omit(data.pre)
data.pre = data.pre[-c(31,32)]
summary(data.pre)
data.pre.cont = data.pre[-c(1, 5, 6, 9, 12, 13, 14, 19, 20, 23, 27, 29)]
data.pca = prcomp(data.pre.cont, scale=TRUE)
loadings = data.pca$rotation
loadings
merged_demo_engagement = merge(data.pre, user_engage_data, by = 'user_id')
summary(merged_demo_engagement)
nrow(merged_demo_engagement)
length(kmeanclusters)
nrow(kmeanclusters)
kmeanclusters
summary(merged_demo_engagement)
click_credit_card = user_engage_data[which(kmeanclusters$cluster == 6),]
click_credit_card
summary(merged_demo_engagement)
nrow(merged_demo_engagement)
sum(merged_demo_engagement$user_id)
merged_demo_engagement$user_id
summary(merged_demo_engagement)
click_credit_card = user_engage_data[which(kmeanclusters$cluster == 6),]
click_personal_loan = user_engage_data[which(kmeanclusters$cluster == 7),]
click_credit_card
click_credit_card$user_id
click_credit_users = subset(data.pre, data.pre$user_id %in% click_credit_card$user_id)
click_credit_users
nrow(click_credit_users)
summary(click_credit_users)
click_loan_users = subset(data.pre, data.pre$user_id %in% click_personal_loan$user_id)
summary(click_loan_users)
summary(click_credit_users)
summary(click_loan_users)
summary(click_credit_users)
summary(click_loan_users)
library(dplyr)
compare_them <- function(data1,data2) {
sum1 <- apply(data1,2,summary) %>% data.frame()
sum2 <- apply(data2,2,summary) %>% data.frame()
names(sum1) <- paste0(names(sum1),"1")
names(sum2) <- paste0(names(sum2),"2")
final <- cbind(sum1,sum2)
final1 <- t(final)
final2 <- final1[order(row.names(final1)), ]
final_1 <- t(final2) %>% data.frame()
final_1
}
compare_them(click_credit_users,click_loan_users) %>% View()
summary(click_credit_users)
summary(click_loan_users)
kmeanclusters
plot(data.pca$x[,1:2])
biplot(data.pca, scale=0, cex=0.7)
knitr::opts_chunk$set(echo = TRUE)
summary(user_data)
unique(user_data$credit_score_bucket)
knitr::opts_chunk$set(echo = TRUE)
summary(user_data)
summary(user_engage_actions)
#clustering the user_engage_actions
kmeanclusters = kmeans(user_engage_actions, 5, nstart=20)
#clustering the user_engage_actions
kmeanclusters = kmeans(user_engage_actions, 5, nstart=20)
kmeanclusters
kmeanclusters$cluster
sum(kmeanclusters$cluster == 6)
sum(kmeanclusters$cluster == 1)
sum(kmeanclusters$cluster == 2)
sum(kmeanclusters$cluster == 3)
sum(kmeanclusters$cluster == 4)
sum(kmeanclusters$cluster == 5)
#ploting the wws vs. number of clusters.
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
#clustering the user_engage_actions
kmeanclusters = kmeans(user_engage_actions, 8, nstart=20)
kmeanclusters
sum(kmeanclusters$cluster == 3)
sum(kmeanclusters$cluster == 5)
sum(kmeanclusters$cluster == 4)
#from the clustering, we can see that there are two clusters with larger values in particular columns (see report for interpretation). We want the user IDs of the people who had the inflated column values.
click_credit_card = user_engage_data[which(kmeanclusters$cluster == 3),]
click_personal_loan = user_engage_data[which(kmeanclusters$cluster == 5),]
#creating a subset of user demographics that relate to the people with inflated column values
click_credit_users = subset(data.pre, data.pre$user_id %in% click_credit_card$user_id)
click_loan_users = subset(data.pre, data.pre$user_id %in% click_personal_loan$user_id)
#comparing the user demographics of the two groups of people
summary(click_credit_users)
summary(click_loan_users)
set.seed(5)
kmeanclusters = kmeans(user_engage_actions, 8, nstart=20)
kmeanclusters
sum(kmeanclusters$cluster == 8)
sum(kmeanclusters$cluster == 7)
set.seed(10)
kmeanclusters = kmeans(user_engage_actions, 8, nstart=20)
kmeanclusters
sum(kmeanclusters$cluster == 7)
sum(kmeanclusters$cluster == 4)
#from the clustering, we can see that there are two clusters with larger values in particular columns (see report for interpretation). We want the user IDs of the people who had the inflated column values.
click_credit_card = user_engage_data[which(kmeanclusters$cluster == 7),]
click_personal_loan = user_engage_data[which(kmeanclusters$cluster == 4),]
#creating a subset of user demographics that relate to the people with inflated column values
click_credit_users = subset(data.pre, data.pre$user_id %in% click_credit_card$user_id)
click_loan_users = subset(data.pre, data.pre$user_id %in% click_personal_loan$user_id)
#comparing the user demographics of the two groups of people
summary(click_credit_users)
summary(click_loan_users)
fit
fit = cv_fit_lasso$glmnet.fit
data.pre.lasso = data.pre[,-c(1)]
set.seed(1)
train = sample(1:nrow(data.pre.lasso), nrow(data.pre.lasso))
y = data.pre.lasso[[31]]
x.matrix = data.matrix(data.pre.lasso[-c(31)],rownames.force = NA)
test = (-train)
y.test = y[test]
x.matrix[train,]
x.matrix[train,]
library(glmnet)
cv_fit_lasso = cv.glmnet(x.matrix[train,], y[train], alpha=1)
fit_lasso = glmnet(x.matrix[train,], y[train], alpha=1)
plot(fit_lasso)
plot(cv_fit_lasso, xvar="lambda")
opt_lambda = cv_fit_lasso$lambda.min
fit = cv_fit_lasso$glmnet.fit
fit
coef(fit, s=5)
coef(fit, s=2)
coef(fit, s=5)
coef(fit, s=2)
opt_lambda
install.packages("corrplot")
cor(data.pre)
summary(data.pre)
summary(data.pre[-1])
cor(data.pre[-1])
#biplot to see the loadings
biplot(data.pca, scale=0, cex=0.7)
#More EDA, seeing which variables have a relationship with credit score - used to determine features in Linear Regression
plot(x = data.pre$tradelines_avg_days_since_opened, y = data.pre$credit_score) #no
loadings = data.pca$rotation
loadings
head(loadings)
head(loadings[1:3])
head(loadings)
head(loadings)[1:3]
head(loadings$PC1)
head(loadings["PC1"])
head(loadings[,1:3])
plot(data.pca$x[,1:2])
plot(data.pca$x[,1:2])
loadings
#biplot to see the loadings
biplot(data.pca, scale=0, cex=0.7)
head(loadings[,1:5])
screeplot(data.pca, type = "lines")
screeplot(data.pca, type = "lines", xlab = "Principle Components")
screeplot(data.pca, type = "lines", main = "Principle Components vs. Variance")
head(loadings[,1:4])
loadings[,1:4]
biplot(data.pca, scale=0, cex=0.7)
#reading in data
user_engage_data = read.csv('user_engagement.csv')
#reading in data
user_engage_data = read.csv('user_engagement.csv')
